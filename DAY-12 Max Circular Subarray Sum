class Solution {
  public:
    // arr: input array
    // Function to find maximum circular subarray sum.
      int circularSubarraySum(vector<int>& arr) {
        int n = arr.size();
        auto kadane = [](vector<int>& arr) {
            int max_sum = arr[0];
            int current_sum = arr[0];
            for (int i = 1; i < arr.size(); i++) {
                current_sum = max(arr[i], current_sum + arr[i]);
                max_sum = max(max_sum, current_sum);
            }
            return max_sum;
        };
        int max_kadane = kadane(arr);
        int total_sum = accumulate(arr.begin(), arr.end(), 0);
        for (int i = 0; i < n; i++) {
            arr[i] = -arr[i];
        }
        int max_inverted_kadane = kadane(arr);
        int max_circular = total_sum + max_inverted_kadane;
        if (max_circular == 0) {
            return max_kadane;
        }
        return max(max_kadane, max_circular);
    }
};
